// <auto-generated />
using System;
using IntentManagementAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IntentManagementAPI.Migrations
{
    [DbContext(typeof(IntentManagementContext))]
    [Migration("20250625175812_InitialClean")]
    partial class InitialClean
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("IntentManagementAPI.Models.Core.Expression", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExpressionType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpressionValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Iri")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "@schemaLocation");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "@type");

                    b.HasKey("Id");

                    b.ToTable("Expressions");

                    b.HasDiscriminator<string>("ExpressionType").HasValue("Expression");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("IntentManagementAPI.Models.Core.Intent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BaseType")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "@baseType");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExpressionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Href")
                        .HasColumnType("TEXT");

                    b.Property<string>("IntentType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBundle")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LifecycleStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "@schemaLocation");

                    b.Property<DateTime>("StatusChangeDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "@type");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExpressionId");

                    b.ToTable("Intents");

                    b.HasDiscriminator<string>("IntentType").HasValue("Intent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("IntentManagementAPI.Models.Supporting.IntentRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BaseType")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "@baseType");

                    b.Property<string>("Href")
                        .HasColumnType("TEXT");

                    b.Property<int?>("IntentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RelationshipType")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "@schemaLocation");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "@type");

                    b.HasKey("Id");

                    b.HasIndex("IntentId");

                    b.ToTable("IntentRelationship");
                });

            modelBuilder.Entity("IntentManagementAPI.Models.Core.JsonLdExpression", b =>
                {
                    b.HasBaseType("IntentManagementAPI.Models.Core.Expression");

                    b.HasDiscriminator().HasValue("JsonLdExpression");
                });

            modelBuilder.Entity("IntentManagementAPI.Models.Core.TurtleExpression", b =>
                {
                    b.HasBaseType("IntentManagementAPI.Models.Core.Expression");

                    b.HasDiscriminator().HasValue("TurtleExpression");
                });

            modelBuilder.Entity("IntentManagementAPI.Models.Core.ProbeIntent", b =>
                {
                    b.HasBaseType("IntentManagementAPI.Models.Core.Intent");

                    b.HasDiscriminator().HasValue("ProbeIntent");
                });

            modelBuilder.Entity("IntentManagementAPI.Models.Core.Intent", b =>
                {
                    b.HasOne("IntentManagementAPI.Models.Core.Expression", "Expression")
                        .WithMany()
                        .HasForeignKey("ExpressionId");

                    b.OwnsOne("IntentManagementAPI.Models.Supporting.TimePeriod", "ValidFor", b1 =>
                        {
                            b1.Property<int>("IntentId")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime>("EndDateTime")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("StartDateTime")
                                .HasColumnType("TEXT");

                            b1.HasKey("IntentId");

                            b1.ToTable("Intents");

                            b1.WithOwner()
                                .HasForeignKey("IntentId");
                        });

                    b.OwnsMany("IntentManagementAPI.Models.Supporting.Attachment", "Attachment", b1 =>
                        {
                            b1.Property<int>("IntentId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AttachmentType")
                                .HasColumnType("TEXT");

                            b1.Property<string>("BaseType")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "@baseType");

                            b1.Property<string>("Content")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Description")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Href")
                                .HasColumnType("TEXT");

                            b1.Property<string>("MimeType")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ReferredType")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "@referredType");

                            b1.Property<string>("SchemaLocation")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "@schemaLocation");

                            b1.Property<string>("Type")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "@type");

                            b1.Property<string>("Url")
                                .HasColumnType("TEXT");

                            b1.HasKey("IntentId", "Id");

                            b1.ToTable("Attachment");

                            b1.WithOwner()
                                .HasForeignKey("IntentId");

                            b1.OwnsOne("IntentManagementAPI.Models.Supporting.TimePeriod", "ValidFor", b2 =>
                                {
                                    b2.Property<int>("AttachmentIntentId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("AttachmentId")
                                        .HasColumnType("TEXT");

                                    b2.Property<DateTime>("EndDateTime")
                                        .HasColumnType("TEXT");

                                    b2.Property<DateTime>("StartDateTime")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("AttachmentIntentId", "AttachmentId");

                                    b2.ToTable("Attachment");

                                    b2.WithOwner()
                                        .HasForeignKey("AttachmentIntentId", "AttachmentId");
                                });

                            b1.Navigation("ValidFor");
                        });

                    b.OwnsMany("IntentManagementAPI.Models.Supporting.Characteristic", "Characteristic", b1 =>
                        {
                            b1.Property<int>("IntentId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<string>("BaseType")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "@baseType");

                            b1.Property<string>("Name")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SchemaLocation")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "@schemaLocation");

                            b1.Property<string>("Type")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "@type");

                            b1.Property<string>("Value")
                                .HasColumnType("TEXT");

                            b1.HasKey("IntentId", "Id");

                            b1.ToTable("Characteristic");

                            b1.WithOwner()
                                .HasForeignKey("IntentId");
                        });

                    b.OwnsOne("IntentManagementAPI.Models.Supporting.Context", "Context", b1 =>
                        {
                            b1.Property<int>("IntentId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("BaseType")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "@baseType");

                            b1.Property<DateTime>("CreationDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Description")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime>("LastUpdate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("LifecycleStatus")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SchemaLocation")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "@schemaLocation");

                            b1.Property<DateTime>("StatusChangeDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Type")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "@type");

                            b1.Property<string>("Version")
                                .HasColumnType("TEXT");

                            b1.HasKey("IntentId");

                            b1.ToTable("Intents");

                            b1.WithOwner()
                                .HasForeignKey("IntentId");
                        });

                    b.OwnsMany("IntentManagementAPI.Models.Supporting.RelatedParty", "RelatedParty", b1 =>
                        {
                            b1.Property<int>("IntentId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("BaseType")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "@baseType");

                            b1.Property<string>("Href")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ReferredType")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "@referredType");

                            b1.Property<string>("Role")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SchemaLocation")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "@schemaLocation");

                            b1.Property<string>("Type")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "@type");

                            b1.HasKey("IntentId", "Id");

                            b1.ToTable("RelatedParty");

                            b1.WithOwner()
                                .HasForeignKey("IntentId");
                        });

                    b.Navigation("Attachment");

                    b.Navigation("Characteristic");

                    b.Navigation("Context");

                    b.Navigation("Expression");

                    b.Navigation("RelatedParty");

                    b.Navigation("ValidFor");
                });

            modelBuilder.Entity("IntentManagementAPI.Models.Supporting.IntentRelationship", b =>
                {
                    b.HasOne("IntentManagementAPI.Models.Core.Intent", "Intent")
                        .WithMany("IntentRelationship")
                        .HasForeignKey("IntentId");

                    b.Navigation("Intent");
                });

            modelBuilder.Entity("IntentManagementAPI.Models.Core.Intent", b =>
                {
                    b.Navigation("IntentRelationship");
                });
#pragma warning restore 612, 618
        }
    }
}
